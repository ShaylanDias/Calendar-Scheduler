{"version":3,"sources":["Calendar.js","TimeCard.js","Signup.js","CardHolder.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["CalendarComponent","props","handleDayClick","bind","state","selectedDay","undefined","day","selected","this","setState","getDay","onDayClick","selectedDays","style","toLocaleDateString","React","Component","paddingStyle","TimeCard","date","toLocaleTimeString","class","Signup","CardHolder","times","map","time","Date","height","className","mapTimes","renderSignup","Dashboard","calendar","Calendar","newDay","i","getTime","push","retrieveDay","makeTimes","Home","About","Topics","match","useRouteMatch","to","url","path","Topic","topicId","useParams","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.517b8516.chunk.js","sourcesContent":["import React from \"react\";\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\n\n\nexport default class CalendarComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleDayClick = this.handleDayClick.bind(this);\n      this.state = {\n        selectedDay: undefined,\n      };\n    }\n  \n    handleDayClick(day, {selected}) {\n      this.setState({ selectedDay: day });\n      if (selected) {\n        // Unselect the day if already selected\n        this.setState({ selectedDay: undefined });\n        this.props.getDay(undefined)  \n        return;\n      }\n      this.props.getDay(day)  \n    }\n  \n    render() {\n      return (\n        <div>\n          <DayPicker \n            onDayClick={this.handleDayClick}\n            selectedDays={this.state.selectedDay}\n           />\n          {this.state.selectedDay ? (\n            <p style = {{\"margin-left\":\"20px\"}}>You clicked {this.state.selectedDay.toLocaleDateString()}</p>\n          ) : (\n            <p style = {{\"margin-left\":\"20px\"}}>Please select a day.</p>\n          )}\n        </div>\n      );\n    }\n  }","import React from \"react\";\nimport './index.css'\n\nconst paddingStyle = {\n    'padding':'-15px',\n    'text-align':'left'\n};\n\nexport default class TimeCard extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        date: this.props.date.toLocaleTimeString()\n      };\n    }\n  \n    setDate(date) {\n        this.setState({date: date})\n    }\n  \n    render() {\n      return (\n        <div class=\"ui secondary basic button\">\n        <p style = {paddingStyle} class = \"description\">\n          {this.state.date ? (\n            <p> {this.state.date}</p>\n          ) : (\n            <p>No Time</p>\n          )}\n          </p>\n          <button  class=\"ui positive basic button\">Confirm Time</button>\n        </div>\n      );\n    }\n  }","import React from \"react\";\nimport './index.css'\n\n\nexport default class Signup extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n      };\n    }\n  \n  \n    render() {\n      return (\n        <div>\n            {/* <h1 class=\"box monospace-font\">Signup Page</h1>\n            <div id=\"root\"></div>\n                <form class = \"box more-padding mono\">\n                <div>\n                    <input type=\"text\" required>First Name</input>\n                </div>\n                <div>\n                    <input type=\"text\" required>Last Name</input>\n                </div>\n                <div>\n                    <input type=\"text\" required style=\"padding-left:32px\">Email</input>\n                </div>\n                <button type=\"button\" id=\"submit\">Submit</button>\n            </form> */}\n        </div>\n      );\n    }\n  }","import React from \"react\";\nimport './index.css'\nimport TimeCard from \"./TimeCard\"\nimport Signup from \"./Signup.js\"\n\n\nexport default class CardHolder extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        times: this.props.times\n      };\n    }\n  \n    mapTimes() {\n        if(this.state.times()) {\n            return this.state.times().map(time => <TimeCard\n                date = {new Date(time)}\n            >\n            </TimeCard>)\n        }\n    }\n  \n    renderSignup() {\n        if (this.state.times) {\n            return <Signup></Signup>\n        }\n    }\n\n    render() {\n      return (\n        <div style = {{height:\"800px\"}} >\n          <p className = \"verticalStack\">\n            {this.mapTimes()}\n          </p>\n          {this.renderSignup()}\n        </div>\n      );\n    }\n  }","import React from \"react\";\nimport Calendar from \"./Calendar.js\"\nimport TimeCard from \"./TimeCard.js\"\nimport CardHolder from \"./CardHolder.js\"\nimport \"./index.css\"\n\nexport default class Dashboard extends React.Component {\n    constructor(props) {\n      super(props);\n      this.calendar = new Calendar()\n      this.state = {\n        selectedDay: undefined,\n      };\n    }\n\n    retrieveDay(newDay) {\n        this.setState({ selectedDay: newDay })\n    }\n\n    makeTimes() {\n      let times = []\n      if (this.state.selectedDay) {\n        for (let i = this.state.selectedDay.getTime(); i <= this.state.selectedDay.getTime() + 1000*60*60*5; i+= 1000 * 60 * 30) {\n          times.push(i)\n        }\n      }\n      return times\n    }\n\n    render() {\n        return (\n          <div className = \"inline\">\n            <div style = {{\"margin-right\": \"100px\"}}>\n              <Calendar getDay = {this.retrieveDay.bind(this)}/>\n            </div>\n            <CardHolder times = {this.makeTimes.bind(this)} class=\"inline\"></CardHolder>\n          </div>\n        );\n      }\n}","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from \"react\";\nimport Dashboard from \"./Dashboard.js\"\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n          {/* <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li> */}\n          <li>\n            <Link to=\"/calendar\">Calendar</Link>\n          </li>\n        </ul>\n\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/topics\">\n            <Topics />\n          </Route>\n          <Route path=\"/calendar\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (<><div style = {{\"margin-left\":\"20px\"}}><h2>Home</h2>\n          <p>Welcome to the Scheduler!</p></div> </>)\n}\n\nfunction About() {\n  return (<><div style = {{\"margin-left\":\"20px\"}}> <h2>About</h2>\n  <p>This Scheduler exists to allow you to easily schedule Google Calendar appointments. Click Calendar to begin.</p></div> </>);\n}\n\nfunction Topics() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>\n            Props v. State\n          </Link>\n        </li>\n      </ul>\n\n      {/* The Topics page has its own <Switch> with more routes\n          that build on the /topics URL path. You can think of the\n          2nd <Route> here as an \"index\" page for all topics, or\n          the page that is shown when no topic is selected */}\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}